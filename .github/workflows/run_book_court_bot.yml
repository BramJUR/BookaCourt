name: Book Tennis Court

on:
  # This allows Make.com to trigger the workflow
  workflow_dispatch:

jobs:
  run-booking-bot:
    runs-on: ubuntu-latest
    
    steps:
      - name:  checkout repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Check if a booking is needed today
        id: check_booking
        run: |
          # The day names must match your config.json and Python script
          DAYS=("Maandag" "Dinsdag" "Woensdag" "Donderdag" "Vrijdag" "Zaterdag" "Zondag")
          
          # Calculate which day we need to book FOR. The rule is 6 days in advance.
          # GitHub runners are in UTC, so adjust your Make.com trigger if needed.
          
          # --- THIS IS THE ONLY LINE THAT HAS BEEN CHANGED ---
          BOOK_FOR_DAY_INDEX=$(($(date +%u) + 7))
          
          if [[ $BOOK_FOR_DAY_INDEX -gt 7 ]]; then
            BOOK_FOR_DAY_INDEX=$((BOOK_FOR_DAY_INDEX - 7))
          fi
          
          # Convert index (1=Mon) to day name from our array (0=Mon)
          TARGET_DAY_TO_BOOK=${DAYS[$((BOOK_FOR_DAY_INDEX - 1))]}
          echo "Today is $(date +%A). According to the 6-day rule, we should book for next ${TARGET_DAY_TO_BOOK}."

          # Check if this day exists as a key in config.json
          # We use 'jq' a command-line JSON processor
          if jq -e ".${TARGET_DAY_TO_BOOK}" config.json > /dev/null; then
            echo "‚úÖ Config found for ${TARGET_DAY_TO_BOOK}. The bot needs to run."
            TARGET_TIME=$(jq -r ".${TARGET_DAY_TO_BOOK}" config.json)
            
            # Set outputs for the next steps
            echo "run_bot=true" >> $GITHUB_OUTPUT
            echo "target_day=${TARGET_DAY_TO_BOOK}" >> $GITHUB_OUTPUT
            echo "target_time=${TARGET_TIME}" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No configuration found for ${TARGET_DAY_TO_BOOK}. Nothing to do today."
            echo "run_bot=false" >> $GITHUB_OUTPUT
          fi

      - name: üêç Setup Python if booking is needed
        if: steps.check_booking.outputs.run_bot == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: üì¶ Install Python dependencies
        if: steps.check_booking.outputs.run_bot == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: ü§ñ Run the Booking Bot
        if: steps.check_booking.outputs.run_bot == 'true'
        env:
          # Use secrets for your credentials!
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          TARGET_DAY: ${{ steps.check_booking.outputs.target_day }}
          TARGET_TIME: ${{ steps.check_booking.outputs.target_time }}
        run: python -u "Book a Court.py"
        
      - name: üì§ Upload Screenshots on Failure
        if: failure() && steps.check_booking.outputs.run_bot == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: error-screenshots
          path: ./*.png
